// POST /api/test-browser/test-script - Complete automation with handoff
router.post("/test-script", async (req, res) => {
  try {
    console.log("üöÄ Starting complete test script automation...");

    // 1. Create new Browserbase session
    const session = await browserbase.sessions.create({
      projectId: process.env.BROWSERBASE_PROJECT_ID!,
      browserSettings: {
        context: { persist: true },
        viewport: { width: 1280, height: 720 },
        fingerprint: {
          devices: ["desktop"],
          locales: ["en-US"],
          operatingSystems: ["windows"]
        }
      },
      proxies: true,
      timeout: 3600 // 1 hour in seconds
    });

    console.log("‚úÖ Session created:", session.id);

    // 2. Connect to browser
    const browser = await chromium.connectOverCDP(session.connectUrl);
    const defaultContext = browser.contexts()[0];
    const page = defaultContext.pages()[0];

    // Store session globally for cleanup
    currentSession = session;
    testBrowser = browser;
    testPage = page;
    isConnected = true;

    // 3. Get live view URL
    const liveViewLinks = await browserbase.sessions.debug(session.id);
    const liveViewUrl = liveViewLinks.debuggerFullscreenUrl;

    // 4. Navigate to Twitter login
    console.log("üåê Navigating to Twitter login...");
    await page.goto('https://x.com/i/flow/login', {
      waitUntil: 'networkidle',
      timeout: 30000
    });

    // 5. Check if login is needed
    const needsLogin = await checkIfLoginNeeded(page);

    if (needsLogin) {
      // 6. Request manual intervention
      console.log("üîê Manual login required");
      
      // Notify WebSocket clients
      broadcastToClients({
        type: 'automation_progress',
        message: 'Please complete login to continue automation',
        step: 'manual_login'
      });

      res.json({
        success: true,
        status: 'manual_intervention_required',
        liveViewUrl: liveViewUrl,
        message: 'Please complete login in the browser above',
        sessionId: session.id
      });

      // 7. Wait for login completion in background
      waitForLoginAndContinue(page, session.id);

    } else {
      // Already logged in, continue directly
      console.log("‚úÖ Already logged in, continuing automation...");
      res.json({
        success: true,
        status: 'continuing_automation',
        message: 'Already logged in, continuing with automation'
      });

      // Continue with automation
      performTestAutomation(page, session.id);
    }

  } catch (error) {
    console.error("‚ùå Test script error:", error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});