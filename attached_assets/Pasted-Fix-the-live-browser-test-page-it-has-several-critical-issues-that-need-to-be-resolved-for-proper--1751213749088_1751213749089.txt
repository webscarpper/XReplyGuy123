Fix the live browser test page - it has several critical issues that need to be resolved for proper testing.

## ISSUES TO FIX:

### 1. BROWSER VIEW SIZE:
- Current browser canvas is too small and cut off
- Make browser view MUCH LARGER (at least 1200x800px)
- Show FULL browser window including URL bar and navigation
- Make it the main focus of the page

### 2. MANUAL CONTROL FIXES:
- Click events are not working properly
- Fix coordinate mapping between canvas and browser
- Ensure clicks are accurately forwarded to correct positions
- Add visual feedback when clicks are registered

### 3. URL BAR VISIBILITY:
- Browser view should show the complete browser interface
- Include URL bar, navigation buttons, and page content
- User should see exactly what's happening in the browser
- Add current URL display above the browser view

### 4. CLEAN UP INTERFACE:
- Remove cluttered test sections
- Focus on: Connection Status + Large Browser View + Simple Controls
- Make it look like a professional browser remote control
- Reduce confusing elements

## NEW LAYOUT DESIGN:

┌─────────────────────────────────────────────────┐ │ Connection Status: ✅ Connected to Bright Data │ │ Current URL: https://x.com │ │ Manual Control: [ON] [OFF] │ ├─────────────────────────────────────────────────┤ │ │ │ LARGE BROWSER VIEW │ │ (1200x800px minimum) │ │ Shows full browser with URL bar │ │ │ │ │ │ │ ├─────────────────────────────────────────────────┤ │ [Navigate to URL] [Take Screenshot] [End] │ └─────────────────────────────────────────────────┘


## TECHNICAL FIXES NEEDED:

### Backend (test-browser.ts):
```javascript
// Fix screencasting to show FULL browser window
await client.send('Page.startScreencast', {
    format: 'jpeg',
    quality: 90,
    maxWidth: 1400,  // Larger size
    maxHeight: 900,  // Larger size
    everyNthFrame: 1
});

// Fix click coordinate mapping
websocket.on('mouse_click', async (data) => {
    // Ensure accurate coordinate translation
    await page.mouse.click(data.x, data.y);
    console.log(`Clicked at: ${data.x}, ${data.y}`); // Debug
});
Frontend (test-browser.tsx):
// Make browser canvas MUCH larger

canvas
// Fix click coordinate calculation const handleCanvasClick = (e) => { const rect = canvas.getBoundingClientRect(); const scaleX = 1400 / rect.width; const scaleY = 900 / rect.height; const x = (e.clientX - rect.left) * scaleX; const y = (e.clientY - rect.top) * scaleY;

// Send click with proper coordinates
websocket.send({
    type: 'mouse_click',
    x: Math.round(x),
    y: Math.round(y)
});
};


## UI IMPROVEMENTS:

### Clean, Professional Layout:
- Remove all the cluttered test sections
- Make browser view the main element (80% of screen)
- Simple controls at top and bottom
- Clear status indicators
- Professional appearance

### Better Visual Feedback:
- Show click indicators on canvas
- Display current URL prominently  
- Clear connection status
- Manual control toggle that actually works

## SUCCESS CRITERIA:
✓ Large, clear browser view (1200x800+ pixels)
✓ Full browser interface visible (URL bar, navigation)
✓ Clicks work accurately where you click
✓ Clean, professional interface
✓ Easy to understand and use
✓ Manual control toggle works properly

Make this look and work like a professional browser remote control tool, not a confusing test page.